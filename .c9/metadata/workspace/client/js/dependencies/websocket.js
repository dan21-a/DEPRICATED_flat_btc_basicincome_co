{"filter":false,"title":"websocket.js","tooltip":"/client/js/dependencies/websocket.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":129,"column":0},"action":"remove","lines":["'use strict';","","/* Copyright 2014 Azure Standard https://www.azurestandard.com/"," * Released under the MIT license (http://opensource.org/licenses/MIT)."," *"," * A WebSocket service for AngularJS"," */","","var websocketModule = angular","    .module('websocket', [])","    .factory('$websocket', ['$rootScope', function($rootScope) {","        var make_message = function (topic, body) {","            return topic + \" \" + JSON.stringify(body);","        };","","        var parse_message = function (msg) {","            var topic, body, parts;","            parts = msg.split(\" \", 1);","            topic = parts[0];","            body = JSON.parse(msg.substring(topic.length + 1));","            return {\"topic\": topic, \"body\": body};","        };","","        var send = function (wrapped_websocket, msg) {","            if (wrapped_websocket.ready) {","                wrapped_websocket.websocket.send(msg);","            } else {","                wrapped_websocket.queue.push(msg);","            }","        };","","        var onopen = function (wrapped_websocket) {","            console.log('opened socket', wrapped_websocket.endpoint);","            wrapped_websocket.ready = true;","            if (wrapped_websocket.queue.length) {","                wrapped_websocket.queue.forEach(function (item) {","                    send(wrapped_websocket, item);","                });","            }","            wrapped_websocket.queue = [];","        };","","        var onerror = function (wrapped_websocket, error) {","            console.log('socket error', wrapped_websocket.endpoint, error);","        };","","        var onmessage = function(wrapped_websocket, msg) {","            var parsed;","            parsed = parse_message(msg.data);","            //This is a 'service' level message, which all service","            //consumers should listen to, and react by reloading.","            if (parsed.topic == '/refresh') {","                window.location.reload();","            }","            handle(wrapped_websocket, parsed.topic, parsed.body)","            $rootScope.$apply();","        };","","        var register = function(wrapped_websocket, topic, callback, options) {","            if (!options) {","                options = {};","            }","            if (!('exact' in options)) {","                options.exact = false;","            }","            if (!wrapped_websocket.listeners[topic]) {","                wrapped_websocket.listeners[topic] = [];","            }","            if (wrapped_websocket.listeners[topic].indexOf(callback) == -1) {","                wrapped_websocket.listeners[topic].push({","                    callback: callback,","                    options: options","                });","            }","        };","","        var handle = function (wrapped_websocket, topic, body) {","            var interested = [];","            Object.keys(wrapped_websocket.listeners).forEach(function (key) {","                if (topic.indexOf(key) === 0) {","                    wrapped_websocket.listeners[key].forEach(function (listener) {","                        if (listener.options.exact && key != topic) {","                            return;","                        }","                        if (interested.indexOf(listener.callback) == -1) {","                            listener.callback(topic, body);","                            interested.push(listener.callback);","                        }","                    });","                }","            });","        };","","        return {","            connect: function (endpoint) {","                var wrapped_websocket = {","                    endpoint: endpoint,","                    websocket: null,","                    ready: false,","                    queue: [],","                    listeners: {},","","                    emit: function(topic, body) {","                        send(this, make_message(topic,body));","                    },","","                    register: function (topic, callback, options) {","                        register(this, topic, callback, options);","                    },","                };","                console.log('connect to', endpoint);","                wrapped_websocket.websocket = new window.WebSocket(endpoint);","","                wrapped_websocket.websocket.onopen = function () {","                    return onopen(wrapped_websocket);","                };","","                wrapped_websocket.websocket.onerror = function (error) {","                    return onerror(wrapped_websocket, error);","                };","","                wrapped_websocket.websocket.onmessage = function (msg) {","                    return onmessage(wrapped_websocket, msg);","                };","","                return wrapped_websocket;","            },","        };","    }]);",""]},{"start":{"row":0,"column":0},"end":{"row":121,"column":44},"action":"insert","lines":[";(function(module, undefined) {","'use strict';","","module.provider('WebSocket', function() {","    // when forwarding events, prefix the event name","    var _prefix = 'websocket:';","    var _WebSocket;","    var _uri;","    var _protocols;","    var _definedEvents = [];","","    this.prefix = function(newPrefix) {","      _prefix = newPrefix;","      return this;","    };","","    this.uri = function(uri, protocols) {","      protocols = Array.prototype.slice.call(arguments, 1);","      _uri = uri;      ","      _protocols = protocols;","      _WebSocket = new WebSocket(uri, protocols);","      return this;","    };","","    // expose to provider","    this.$get = ['$rootScope', '$timeout', function($rootScope, $timeout) {","","      var ws = _WebSocket;","","      var asyncAngularify = function (callback) {","        return function(args) {","          args = Array.prototype.slice.call(arguments);","          $timeout(function() {","            callback.apply(ws, args);","          });","        };","      };","","      var addListener = function(event) {","        event = event && 'on'+event || 'onmessage';","        return function(callback) {","          ws[event] = asyncAngularify(callback);","          _definedEvents.push(event);","          return this;","        };","      };","","      var wrappedWebSocket = {","        states: ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'],","        on: function(event, callback) {","          return addListener(event)(callback);","        },","        onmessage: addListener('message'),","        onclose: addListener('close'),","        onopen: addListener('open'),","        onerror: addListener('error'),","        new: function() {","          var oldws = ws;","          ws = new WebSocket(_uri, _protocols);","          //assign the old events to the new websocket","          var _len;","          for (var i = 0, _len = _definedEvents.length; i < _len; i++) {","            ws[_definedEvents[i]] = oldws[_definedEvents[i]];","          }","          return this;","        },","        close: function() {","          ws.close();","          return this","        },","        readyState: function() {","          return ws.readyState","        },","        currentState: function() {","          return this.states[ws.readyState];","        },","        send: function(message) {","          message = Array.prototype.slice.call(arguments);","          ws.send.apply(ws, message);","          return this;","        },","","        removeListener: function(args) {","          args = Array.prototype.slice.call(arguments);","          ws.removeEventListener.apply(ws, args);","          return this;","        },","","        // when ws.on('someEvent', fn (data) { ... }),","        // call scope.$broadcast('someEvent', data)","        forward: function(events, scope) {","","          if (events instanceof Array === false) {","            events = [events];","          }","","          if (!scope) {","            scope = $rootScope;","          }","","          events.forEach(function(eventName) {","            var prefixedEvent = _prefix + eventName;","            var forwardEvent = asyncAngularify(function(data) {","              scope.$broadcast(prefixedEvent, data);","            });","            scope.$on('$destroy', function () {","              ws.removeEventListener(eventName, forwardEvent);","            });","            ws.onmessage(eventName, forwardEvent);","          });","          return this;","","        }","      };","","      return wrappedWebSocket;","","    }];","","});","","}(angular.module('angular-websocket', [])));"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":121,"column":44},"end":{"row":121,"column":44},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":82,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1419077081644,"hash":"c8a8d57301afa8a8a3fca92f6354f6b6dfedb1cf"}